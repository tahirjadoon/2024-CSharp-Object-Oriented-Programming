DataTypes and Variables
--------------------------

	float: floating point numbers - 4 bytes 7 precision (decimal) digits
		float float_num = 0.0f;
		
	double: floating point numbers - 8 bytes 15-16 precision (decimal) digits
		double double_num = 0.0d;

	decimal: money values - 16 bytes 28-29 precision (precision) places
		decimal decimal_num = 0.0m;

	string: string values

	char
		char letter_a = 'a';

	bool: true/false

	int: numbers

	uint: positive numbers starting with 0

	long: numbers

	ulong: positive numbers starting with 0

	short: -32,768 to 32,767

	sbyte: -128 to 129

	byte: positive number 0 to 255

	ushort: positive numbers, starts with 0

	DateTime

	TimeSpan

	DateTimeOffset

	var
	
-------------------------------------

Precedence of operators: () */ +- =

-------------------------------------

Comparison Operators: == equal, != not equal, > greater than, < less than, >= greater than or equal to, <= less than or equal to 

-------------------------------------

Logical Operators 
	
	ConditionX		ConditionY		AND		OR
	true			true			true	true
	true			false			false	true
	false			true			false	true
	false			false			false	false
	
-------------------------------------

Error Types
	Syntax Errors like missing a ;
	Run time Errors (Exceptions)
	Logical Errors
	
-------------------------------------	

Build: Incremental, build the files that have been modified since last successful compile

Re-build: Clean then buuld the solution from scratch 

Clean: Deleet all compiled files from bin and obj dir

-------------------------------------

Math
	Math.Ceiling(3.2) = 4
	Math.Ceiling(4.6) = 5
	
	Math.Floor(4.6) = 4
	
	Match.Round(4.6) = 5
	Match.Round(4.2) = 4
	Match.Round(4.2, 1) = 4.2
	Match.Round(4.22, 1) = 4.2
	Match.Round(4.26, 1) = 4.3
	
	Math.Truncate(4.227) = 4
	
	Math.Max(9,4) = 9
	Math.Min(9,4) = 4
	
	Math.Sqrt(9) = 3
	Math.Sqrt(4) = 2
	
	Math.Pow(2, 2) = 4
	Math.Pow(3, 2) = 9
	
	Math.PI it will give 3.1415926535897931
	
--------------------------------------

Object Oriented Programming 
	Inheritance: The process of creating the new class by extending the existing class or the process of inheriting the features  of base class 

	Encapsulation: Encapculation is the process of binding data members (vraiables, properties) and methods together

	Polymorphism: Poly means many and Morph means forms. It is the process in which an object or function take different forms

	Abstraction: is the process of showing only essential features of an object to the outside world and hide the other irrelevant information.
	
	Methods: 
		Code block
		Can pass params by value - using a copy
		Can pass by reference: using the variale itself - ref or out keyword 
		
	Overloaded Methed: Multiple methods with the same name but different arguments 

	Sealed Classes: no one can inherit from these 
	
	Static Classes: Cannot create instance, are sealed and have static members
	
	Nested Classes: A class placed inside a class 
	
	Partial Classes: Can create classes into different files with keyword partial 
	
	Access Modifiers
		Public: access is not restricted
		Protected: Access is limited to the containing class or types derived from the containing class
		Private: Access is limited to the containing type 
		Internal: Access is limited to the current assembly
		Proected internal: access is limited to the current assembly or types derived from the containing class
		
	Namespaces: is a container, used for grouping, organising code
	
	Struct: use the same access modifiers as classes 
		Classes are reference type where as struct are value type 
		Classes lives on heap, struct lives inline - stack
		Struct cannot support inheritance
		
	enum: an enum (or enumeration type) is used to assign constant names to a group of numeric integer values
		
	this: The this keyword refers to the current instance of the class and is also used as a modifier of the first parameter of an extension method.
	
	Interfaces: 
		Interface has no implementation
		It only has the definition for a group of related functionalities
		Will need a class or struct to implement the interface
		It is a contract, classes or struct inplementing the interface should follow
		
	Interfaces VS Abstract 
		Similarities
			Can't be instantiated
			Must implement all its members
			Can contain events, methods and properties 
		Differences
			Interfaces 															Abstract Classes
				Can't have method implementation									Can have method implementations
				Allow multiple inheritance											Doesn't allow multiple inheritance 
				Can't have access modifiers, all public								Can contain access modifiers
				Can't contain variables												Can contain variables 
				
	Composition: can be defined as "part-of" relationship between objects
		Engine is part of car
		The life time of the child instance is dependent upon the parent / owner class 
		When the parent object is delete, the child object is destroyed as well 
			
			
	Aggregation: can be defined as "has-a" relationship between objects
		Teachers and addresses, a teacher must have an address associated 
		One owner
		
	Association: can be defined as "using" relationship between objects 
		A teacher can be teaching many students and student may be learning from many teachers
		There is no ownership
		No lifetime dependency
		
	Generic & Non Generic Collections
		Generic												Non Generic
		Type as a parameter
		Elements of only one type							Multiple type
		Type Safetly
		System.Collections.Generic							System.Collections
		
		Non Generic Collection
			ArrayList, Hashtable, SortedList, Stack, Queue, BitArray
			
			Stack: Stack works as last-in first-out (LIFO) collection
			Queue: Queue works as first-in first-out 
			
			